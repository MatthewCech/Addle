proper new documentation

Discovery implementations for:
- Multi-layer documents
- Eraser tool
- Undo stack

Color palette

maybe add the feature where the viewport can be temporarily locked relative
to the absolute global screen position -- so toolbars and dock widgets can
be added arbitrarily without disrupting the viewport

I'll want to proof-of-concept the Selection and Shapes tools. And document
exporting (i.e., saving). Then build and test for Windows

If that goes well, I'll consider the design to be basically sound and do
some cleanup, refactoring, style work, and documentation. And this is where
I will begin to write up unit and integration tests. If I'm still missing
icons, mouse cursors, and English user text, this will be a good time to
add them.

I'll want to get Google Breakpad going before much longer and also make sure
to test it on Windows.

Around this point, I should also start using GitHub task lists instead of
this file. This will be time to decide the feature set that will comprise
the Alpha version. And go from there.

misc:

when porting to Windows, make sure to specify cmake version 3.4 and add the
property WINDOWS_EXPORT_ALL_SYMBOLS to the shared object modules.

style: enum capitalization, BaseXXX or XXXBase?, initialize_p

Zoom slider: notches, and snapping to presets.

Zoom presets will need some serious work before too long.

destroy document views and presenters

cut icon
redo icon looks like it's disabled

clean up dynamic casting (and virtual inheritance) where possible -- see also 
IFormatModel

Make a generalized fallback format driver based on Qt rather than a bunch of
individual ones (dynamic negotiation based on QImageReader::supportedMimeTypes()
for example)

General-purpose assert function that translates into a thrown IAddleException
which returns true for isLogicError() -- save some unneeded micro exception
classes 

error-wrap, but also combine some functionality between the 
unhandledexceptionrouter and the debug message handler

Icons need some kind of configurable interface

style: namespaces???

trim down readme. it doesn't need to be so rambly

Use QPainterPath subtraction to avoid overpainting in brush operations --
a brush operation should probably be separate from (derived from?) other kinds
of raster operations but also maintain some common interfacing and
functionality.

Tool options bars will need some more work.

The whole UI needs work, lots and lots of work

cut down on #include networks in interface classes with more forward-
declarations to reduce compile times at least a little

Is there some way to make qobject_interface_cast work via qobject_cast instead 
of dynamic_cast ? Maybe interfaces implemented as qobject can be required to 
expose a asQObject() method? Is it actually all that bad as is?

Look back into ServiceLocator and see if we can't leverage the static linker
more with it. The performance is probably fine as-is, but it'd very much be to
our advantage to get linker errors instead of runtime ones for a bad
configuration. And overall it'd be more C++-esque.
Potential complications might involve unit tests and dynamically loaded code
(i.e., plugins), but I think we can adapt.

Pass presenters with shared or weak pointers? At least make init function and 
constructor signatures consistent

organize common/utilities to be less of a junk drawer